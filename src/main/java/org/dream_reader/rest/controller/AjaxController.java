/*
 * Created on 28 thg 9 2017 ( Time 14:20:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.dream_reader.rest.controller;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.fasterxml.jackson.annotation.JsonFormat.Value;
import com.inicis.std.util.SignatureUtil;
import com.mysql.fabric.xmlrpc.base.Array;

import org.dream_reader.bean.UserItem;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.RandomStringUtils;
import org.dream_reader.bean.Ball;
import org.dream_reader.bean.Contents;
import org.dream_reader.bean.PaymentHistory;
import org.dream_reader.bean.User;
import org.dream_reader.bean.jpa.CategoryEntity;
import org.dream_reader.bean.jpa.ContentsEntity;
import org.dream_reader.bean.jpa.UserEntity;
import org.dream_reader.business.service.CategoryService;
import org.dream_reader.business.service.ContentsService;
import org.dream_reader.business.service.PaymentHistoryService;
import org.dream_reader.business.service.UserService;
import org.dream_reader.business.service.mapping.UserServiceMapper;
import org.dream_reader.common.mail.Mail;
import org.dream_reader.rest.common.AbstractRestController;
import org.dream_reader.web.common.utils.DataUtils;
import org.dream_reader.web.common.utils.EncryptionUtils;
import org.dream_reader.web.common.ApplicationDefine;
import org.dream_reader.web.common.Login;
/**
 * Spring MVC controller for 'User' management.
 */
@RequestMapping("/ajax")
@Controller
public class AjaxController extends AbstractRestController{

	@Resource
	private UserService userService;
	
	@Resource
	private PaymentHistoryService paymentHistoryService;
	
	@Resource
	private CategoryService categoryService;
	
	@Resource
	private ContentsService contentsService;
	
	@Resource
	private UserServiceMapper userServiceMapper;
	
			@RequestMapping(value = "/check-exists-username", 
			method = RequestMethod.POST, 
			produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> login(
			@RequestParam (value="username", defaultValue="") String username
			) {
		try {
			UserEntity u = userService.findByUsername(username);
			if (u == null ) {
				return SUCCESS();
			} else {
				return FAIL();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}
	}
			
	@RequestMapping(value = "/checkPassword", 
			method = RequestMethod.POST, 
			produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> checkPassword(
			@RequestParam (value="password", defaultValue="") String password,
			@RequestParam (value="userId", defaultValue="") Integer userId
			) {
		try {
			User u = userService.findById(userId);
			System.out.println(u.getPassword());
			System.out.println(EncryptionUtils.jwtBuild(password));
			if (u.getPassword().equals(EncryptionUtils.jwtBuild(password)) ) {
				return SUCCESS();
			} else {
				return FAIL();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
			}
		}

@RequestMapping(value = "/register", 
	method = RequestMethod.POST, 
		produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> register(
			@RequestParam(value="username", defaultValue="") String username,
			@RequestParam(value="password", defaultValue="") String password,
			@RequestParam(value="password2", defaultValue="") String password2,
			@RequestParam(value="phone", defaultValue="") String phone
			) {
		try {
			if(!username.trim().isEmpty() && !password.isEmpty() && password.equals(password2)){
				User u = new User();
				u.setUsername(username);
				u.setPassword(EncryptionUtils.jwtBuild(password));
				u.setPoint(0);
				u.setUpdateDate(new Date());
				u.setCreateDate(new Date());
				u.setPhone(phone);
				User create = userService.create(u);
				if(create != null) {
					return SUCCESS(create.getId());
				}else {
					return FAIL();
				}
			}else {
				return FAIL();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
	}
	
	@RequestMapping(value = "/login-first", 
			method = RequestMethod.POST, 
			produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> register(
			@RequestParam(value="userId", defaultValue="") Integer userId
			) {
		try {
			try {
				User u =userService.findById(userId);
				u.setPoint(3);
				userService.update(u);
				return SUCCESS();
			} catch (Exception e) {
				e.printStackTrace();
				return FAIL();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
	}
	
	@RequestMapping(value = "/findpw", 
			method = RequestMethod.POST, 
			produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findpw(
			@RequestParam(value="username", defaultValue="") String username
			) {
		try {

			UserEntity u =userService.findByUsername(username);
			User user = userServiceMapper.mapUserEntityToUser(u);
			if(u!= null) {
				String generatedString = RandomStringUtils.randomNumeric(6);
				user.setPassword(EncryptionUtils.jwtBuild(generatedString));
				userService.update(user);
				Mail.sendEmail(username, "임시비밀번호는 "+generatedString+" 입니다. 로그인 후 비밀번호를 변경해주세요.");
				return SUCCESS();
			}else {
				return FAIL();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
	}
	
	@RequestMapping(value = "/getChildCategory", 
			method = RequestMethod.POST, 
			produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getChildCategory(
			@RequestParam(value="parentId", defaultValue="") Integer parentId
			) {
		try {

			List<CategoryEntity> list = categoryService.findByParentId(parentId);
			if(list!= null) {
				
				return SUCCESS(list);
			}else {
				return FAIL();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
		
	}
	
	@RequestMapping(value = "/getContent", 
			method = RequestMethod.POST, 
			produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getTitle(
			@RequestParam(value="childId", defaultValue="") Integer childId
			) {
		try {

			List<ContentsEntity> list = contentsService.findByCategoryId(childId);
			if(list!= null) {
				return SUCCESS(list);
			}else {
				return FAIL();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
		
	}
	
	@RequestMapping(value = "/getBody", 
			method = RequestMethod.POST, 
			produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getBody(
			@RequestParam(value="contentId", defaultValue="") Integer contentId
			) {
		try {
			
			Contents cotent = contentsService.findById(contentId);
			if(cotent!= null) {
				return SUCCESS(cotent);
			}else {
				return FAIL();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
		
	}
	
	@RequestMapping(value = "/checkCoin", 
			method = RequestMethod.POST, 
			produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> checkCoin(
			@RequestParam(value="userId", defaultValue="") Integer userId
			) {
		try {
			User u = userService.findById(userId);
			
			if(u != null) {
				return SUCCESS(u.getPoint());
			}else {
				return FAIL();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
		
	}
	
	@RequestMapping(value = "/getLuckyNumber", 
			method = RequestMethod.POST, 
			produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getLuckyNumber(
			@RequestParam(value="userId", defaultValue="") Integer userId
			, HttpSession session
			) {
		try {
			User user = userService.findById(userId);
			if(user.getPoint() > 0) {
				
				user.setPoint(user.getPoint()-1);
				User userUpdate= userService.update(user);
				UserItem u = new UserItem();
				u.setId(user.getId());
				u.setPoint(user.getPoint());
				u.setUsername(user.getUsername());
				Login.saveUser(u, session);
				HashMap<String, Object> data = new HashMap<>();
				int yellow[] = {1,2,3,4,5,6,7,8,9,10};
				int blue[] = {11,12,13,14,15,16,17,18,19,20};
				int red[] = {21,22,23,24,25,26,27,28,29,30};
				int green[] = {31,32,33,34,35,36,37,38,39,40};
				int grey[] = {41,42,43,44,45};
				
				List<Ball> listBall = new ArrayList<>();
				for (int i = 0; i < 6; i++) {
					Ball ball = new Ball();
					int type = DataUtils.randInt(1, 5);
					ball.setType(type);
					if(type == 1) {
						int rnd = DataUtils.randInt(0, yellow.length-1);
						int number = yellow[rnd];
						ball.setNumber(number);
						yellow=ArrayUtils.removeElement(yellow, number);
						System.out.println("yellow: "+ number);
					}
					if(type == 2) {
						int rnd = DataUtils.randInt(0, blue.length-1);
						int number = blue[rnd];
						ball.setNumber(number);
						blue=ArrayUtils.removeElement(blue, number);
						System.out.println("blue: "+ number);
					}
					if(type == 3) {
						int rnd = DataUtils.randInt(0, red.length-1);
						int number = red[rnd];
						ball.setNumber(number);
						red=ArrayUtils.removeElement(red, number);
						System.out.println("red: "+ number);
					}
					if(type == 4) {
						int rnd = DataUtils.randInt(0, green.length-1);
						int number = green[rnd];
						ball.setNumber(number);
						green=ArrayUtils.removeElement(green, number);
						System.out.println("green: "+ number);
					}
					if(type == 5) {
						int rnd = DataUtils.randInt(0, grey.length-1);
						int number = grey[rnd];
						ball.setNumber(number);
						grey=ArrayUtils.removeElement(grey, number);
						System.out.println("grey: "+ number);
					}
					
					
					listBall.add(ball);
				}
				 Collections.sort(listBall, new Comparator<Ball>() {
				        @Override public int compare(Ball p1, Ball p2) {
				            return p1.getNumber()- p2.getNumber();
				        }
				    });
				data.put("list", listBall);
				data.put("userPoint", userUpdate.getPoint());
				return SUCCESS(data);
			}else {
				return FAIL();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
		
	}
	
	@RequestMapping( value="/processPayment",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> processPayment(
			@RequestParam(value = "userId", defaultValue = "") Integer userId,
			@RequestParam(value = "paymethod", defaultValue = "") String paymethod,
			@RequestParam(value = "money", defaultValue = "") Integer money,
			@RequestParam(value = "point", defaultValue = "") Integer point
			) {
		try {
			PaymentHistory p = new PaymentHistory();
			p.setCreateDate(new Date());
			p.setMoney(0);
			p.setUserId(userId);
			p.setStatus(ApplicationDefine.Payment_Status.Watting.getCode());
			p.setPaymentMethod(paymethod);
			p.setMoney(money);
			p.setPoint(point);
			p.setUpdateDate(new Date());
			p.setUserId(userId);
			p = paymentHistoryService.create(p);
			return SUCCESS(p.getId());
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL(e.getMessage());
		} 
		
	}
	
	@RequestMapping( value="/signaturePayment",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> signaturePayment(
			@RequestParam(value = "mid", defaultValue = "") String mid,
			@RequestParam(value = "price", defaultValue = "") Integer price
			) {
		try {
			HashMap<String, Object> data = new HashMap<>();
			String oid = mid + "_" + SignatureUtil.getTimestamp(); // 가맹점 주문번호(가맹점에서 직접 설정)
			String timestamp = SignatureUtil.getTimestamp(); // util에 의해서 자동생성
			// ###############################################
			// 2.signature 생성
			// ###############################################
			Map<String, String> signParam = new HashMap<String, String>();

			signParam.put("oid", oid ); // 필수
			signParam.put("price", String.valueOf(price)); // 필수
			signParam.put("timestamp", timestamp); // 필수

			// signature 데이터 생성 (모듈에서 자동으로 signParam을 알파벳 순으로 정렬후 NVP 방식으로 나열해 hash)
			String signature = SignatureUtil.makeSignature(signParam);
			data.put("oid", oid);
			data.put("timestamp", timestamp);
			data.put("signature", signature);
			return SUCCESS(data);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL(e.getMessage());
		} 
		
	}
}



