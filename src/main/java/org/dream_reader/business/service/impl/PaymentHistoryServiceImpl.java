/*
 * Created on 2 thg 10 2017 ( Time 16:45:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.dream_reader.business.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.data.jpa.domain.Specification;

import org.dream_reader.bean.PaymentHistory;
import org.dream_reader.bean.jpa.PaymentHistoryEntity;
import java.util.Date;
import org.dream_reader.business.service.PaymentHistoryService;
import org.dream_reader.business.service.mapping.PaymentHistoryServiceMapper;
import org.dream_reader.data.repository.jpa.PaymentHistoryJpaRepository;
import org.dream_reader.web.common.utils.DataUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of PaymentHistoryService
 */
@Component
@Transactional
public class PaymentHistoryServiceImpl implements PaymentHistoryService {

	@Resource
	private PaymentHistoryJpaRepository paymentHistoryJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private PaymentHistoryServiceMapper paymentHistoryServiceMapper;
	
	@Override
	public PaymentHistory findById(Integer id) {
		PaymentHistoryEntity paymentHistoryEntity = paymentHistoryJpaRepository.findOne(id);
		return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntity);
	}

	@Override
	public PaymentHistoryEntity findOne(Integer id) {
		PaymentHistoryEntity paymentHistoryEntity = paymentHistoryJpaRepository.findOne(id);
		return paymentHistoryEntity;
	}

	@Override
	public Page<PaymentHistoryEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return paymentHistoryJpaRepository.findAll(request);
	}

	@Override
	public List<PaymentHistory> findAll() {
		Iterable<PaymentHistoryEntity> entities = paymentHistoryJpaRepository.findAll();
		List<PaymentHistory> beans = new ArrayList<PaymentHistory>();
		for(PaymentHistoryEntity paymentHistoryEntity : entities) {
			beans.add(paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = paymentHistoryJpaRepository.count();
		return count;
	}

	@Override
	public PaymentHistory save(PaymentHistory paymentHistory) {
		return update(paymentHistory) ;
	}

	@Override
	public PaymentHistory create(PaymentHistory paymentHistory) {
/*
		PaymentHistoryEntity paymentHistoryEntity = paymentHistoryJpaRepository.findOne(paymentHistory.getId());
		if( paymentHistoryEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		paymentHistoryEntity = new PaymentHistoryEntity();
		paymentHistoryServiceMapper.mapPaymentHistoryToPaymentHistoryEntity(paymentHistory, paymentHistoryEntity);
		PaymentHistoryEntity paymentHistoryEntitySaved = paymentHistoryJpaRepository.save(paymentHistoryEntity);
		return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntitySaved);
*/
		PaymentHistoryEntity paymentHistoryEntity = new PaymentHistoryEntity();
		paymentHistoryServiceMapper.mapPaymentHistoryToPaymentHistoryEntity(paymentHistory, paymentHistoryEntity);
		PaymentHistoryEntity paymentHistoryEntitySaved = paymentHistoryJpaRepository.save(paymentHistoryEntity);
		return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntitySaved);
	}

	@Override
	public PaymentHistory update(PaymentHistory paymentHistory) {
		PaymentHistoryEntity paymentHistoryEntity = paymentHistoryJpaRepository.findOne(paymentHistory.getId());
		paymentHistoryServiceMapper.mapPaymentHistoryToPaymentHistoryEntity(paymentHistory, paymentHistoryEntity);
		PaymentHistoryEntity paymentHistoryEntitySaved = paymentHistoryJpaRepository.save(paymentHistoryEntity);
		return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		paymentHistoryJpaRepository.delete(id);
	}

	public PaymentHistoryJpaRepository getPaymentHistoryJpaRepository() {
		return paymentHistoryJpaRepository;
	}

	public void setPaymentHistoryJpaRepository(PaymentHistoryJpaRepository paymentHistoryJpaRepository) {
		this.paymentHistoryJpaRepository = paymentHistoryJpaRepository;
	}

	public PaymentHistoryServiceMapper getPaymentHistoryServiceMapper() {
		return paymentHistoryServiceMapper;
	}

	public void setPaymentHistoryServiceMapper(PaymentHistoryServiceMapper paymentHistoryServiceMapper) {
		this.paymentHistoryServiceMapper = paymentHistoryServiceMapper;
	}

	@Override
	public Page<PaymentHistoryEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return paymentHistoryJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<PaymentHistoryEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return paymentHistoryJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}


	@Override
	public Page<PaymentHistoryEntity> filterAdmin( Map<String, Object> params, Integer page, Integer size) {

		Specification<PaymentHistoryEntity> spec = new Specification<PaymentHistoryEntity>() {
			@Override
			public Predicate toPredicate(Root<PaymentHistoryEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();

				if (params.get("key") != null) {
				String key = String.valueOf(params.get("key"));
					if (params.get("type") != null) {
						String type = String.valueOf(params.get("type"));
						Predicate predicate = cb.equal(root.get(type), "%"+key+"%");
						predicates.add(predicate);
					}
				}

				if(params.get("startTime") != null){
					String startTime = String.valueOf(params.get("startTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),DataUtils.parseDate(startTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if(params.get("endTime") != null){
					String endTime = String.valueOf(params.get("endTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),DataUtils.parseDate(endTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}

				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order order = new Order(Direction.DESC, "createDate");
		if (params.get("orderBy") != null) {
			String orderBy = String.valueOf(params.get("orderBy"));
			order = new Order(Direction.DESC, orderBy);
		}

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(order));
		return paymentHistoryJpaRepository.findAll(spec, pageable);
	}

}
