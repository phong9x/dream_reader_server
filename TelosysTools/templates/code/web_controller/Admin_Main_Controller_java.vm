## #set( $tools = $loader.newInstance("Tools") )
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
## --- Primary Key arguments by getters, e.g. "review.getCustomerCode(), review.getBookId()"
#set( $pkElementsGetters = $fn.argumentsListWithGetter($uncapitalizedEntityName, $entity.keyAttributes) )
## --- Primary Key arguments, e.g. "customerCode, bookId"
#set( $pkElementsVariables = $fn.argumentsList($entity.keyAttributes) )
## --- Primary Key request path, e.g. "{customerCode}/{bookId}"
#set( $pkPath = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPath = "${pkPath}/" )
#end
#set( $pkPath = "${pkPath}{${attribute.name}}" )
#end
## --- Primary Key Path Variables, e.g. "@PathVariable("customerCode") String customerCode, @PathVariable("bookId") Integer bookId"
#set( $pkPathVariables = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPathVariables = "${pkPathVariables}, " )
#end
#set( $pkPathVariables = "${pkPathVariables}@PathVariable(${QUOT}${attribute.name}${QUOT}) $attribute.type $attribute.name" )
#end
## // ${DOLLAR}pkPath          = "$pkPath"
## // ${DOLLAR}pkPathVariables = "$pkPathVariables"
##
## --- Referenced entities (e.g. "Book", "Country", "Author", ... )
## #set( $referencedEntities = $tools.referencedEntityTypes($entity, $entity.attributes) )## All referenced entities (PK and NON PK)
## #set( $referencedNonPKEntities = $tools.referencedEntityTypes($entity, $entity.nonKeyAttributes) )## Entities referenced by NON PK fields
#set( $referencedEntities = $entity.referencedEntityTypes() )## All referenced entities (PK and NON PK)
#set( $referencedNonPKEntities = $entity.referencedEntityTypes($entity.nonKeyAttributes) )## Entities referenced by NON PK fields
#set( $userEntityName ="" )
#set( $userName = "" )
#set( $entityName = $fn.uncapitalize($entity.name) )
#if( ${uncapitalizedEntityName} == "user" || ${uncapitalizedEntityName} == "users" || ${uncapitalizedEntityName} == "member" || ${uncapitalizedEntityName} == "members")
		#set( $userEntityName = $entity.name )
		#set( $userName = $fn.uncapitalize($entity.name) )
#else
		#set( $userEntityName = "User" )
		#set( $userName = "user" )
#end
## -----------------------------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};


import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import ${ROOT_PKG}.web.common.AbstractController;
import ${ROOT_PKG}.web.common.Pager;
import ${ROOT_PKG}.web.common.Login;
import ${ROOT_PKG}.web.common.utils.EncryptionUtils;
import ${ROOT_PKG}.web.common.utils.DataUtils;
import ${ROOT_PKG}.bean.${userEntityName};
import ${ROOT_PKG}.bean.UserItem;
//--- Entities



//--- Services 
import ${ROOT_PKG}.business.service.${userEntityName}Service;

@Controller
@RequestMapping("admin")
public class MainAdminController extends AbstractController {

	private static final Integer PAGE_SIZE   = 10;

	private static String nav = "main";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_INDEX   = "public/admin/index";
	private static final String JSP_LOGIN   = "redirect:/public/admin/login";

	//Resource
	@Resource
	private ${userEntityName}Service ${userName}Service;
	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	@RequestMapping(value="/login",method=RequestMethod.POST)
	public String login(
			@RequestParam(value="username",defaultValue="") String username,
			@RequestParam(value="password",defaultValue="") String password,
			@RequestParam(value = "remember", defaultValue = "") String remember,
			Model model, HttpSession session, HttpServletResponse response) {
		if(username == null || password == null){
			model.addAttribute("username", username);
			model.addAttribute("login_success", 0);
			return getView();
		}
		${userEntityName} user = ${userName}Service.login(username,  EncryptionUtils.jwtBuild(password));
		if(user!=null){
			UserItem u = new UserItem();
			u.setId(user.getId());
			Login.saveUser(u, session);
			if (remember != null && remember.equalsIgnoreCase("on")) {
				Cookie name = new Cookie("username", username);
				Cookie pass = new Cookie("password", password);
				// Set expiry date after 24 Hrs for both the cookies.
				name.setMaxAge(60 * 60 * 24);
				pass.setMaxAge(60 * 60 * 24);
				// Add both the cookies in the response header.
				response.addCookie(name);
				response.addCookie(pass);
				model.addAttribute("user", user);
				model.addAttribute("login_success", 1);
			}
			return JSP_INDEX;
		}else{
			model.addAttribute("username", username);
			model.addAttribute("login_success", 0);
			return getView();
		}
		
	}
	
	@RequestMapping(value="/login",method=RequestMethod.GET)
	public String login(Model model, HttpSession session) {
			return getView();
		}
	
	@RequestMapping("/logout")
	public String logout(Model model, HttpSession session) {
			Login.removeUserLogin(session);
			return "redirect:/login";	
		}
	
	
	@RequestMapping(value={"/index",""})
	public String index(
			Model model,HttpSession session) {
			return JSP_INDEX;
	}

}
