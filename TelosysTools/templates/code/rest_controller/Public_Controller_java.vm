#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
## -----------------------------------------------------------------------------------------------------------------------------
## --- Primary Key arguments by getters, e.g. "review.getCustomerCode(), review.getBookId()"
#set( $pkElementsGetters = $fn.argumentsListWithGetter($uncapitalizedEntityName, $entity.keyAttributes) )
## -----------------------------------------------------------------------------------------------------------------------------
## --- Primary Key arguments, e.g. "customerCode, bookId"
#set( $pkElementsVariables = $fn.argumentsList($entity.keyAttributes) )
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
## -----------------------------------------------------------------------------------------------------------------------------
## --- Primary Key request path, e.g. "{customerCode}/{bookId}"
#set( $pkPath = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPath = "${pkPath}/" )
#end
#set( $pkPath = "${pkPath}{${attribute.name}}" )
#end
## -----------------------------------------------------------------------------------------------------------------------------
## --- Primary Key Path Variables, e.g. "@PathVariable("customerCode") String customerCode, @PathVariable("bookId") Integer bookId"
#set( $pkPathVariables = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPathVariables = "${pkPathVariables}, " )
#end
#set( $pkPathVariables = "${pkPathVariables}@PathVariable(${QUOT}${attribute.name}${QUOT}) $attribute.type $attribute.name" )
#end
## -----------------------------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import ${ROOT_PKG}.bean.UserItem;
import ${ROOT_PKG}.bean.${entity.name};
import ${ROOT_PKG}.bean.jpa.${entity.name}Entity;
import ${ROOT_PKG}.business.service.${entity.name}Service;
import ${ROOT_PKG}.rest.common.AbstractRestController;
import ${ROOT_PKG}.rest.common.AuthorizationToken;
import ${ROOT_PKG}.web.common.utils.DataUtils;
import ${ROOT_PKG}.web.common.utils.EncryptionUtils;
import ${ROOT_PKG}.web.common.Login;

@RequestMapping("/${uncapitalizedEntityName}")
@Controller
public class PublicRestController extends AbstractRestController{

	@Resource
	private ${entity.name}Service ${uncapitalizedEntityName}Service;
	
	#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
	#if( ${uncapitalizedEntityName} == "user" || ${uncapitalizedEntityName} == "users" || ${uncapitalizedEntityName} == "member" || ${uncapitalizedEntityName} == "members")
	@RequestMapping(value = "/login", method = { RequestMethod.POST,
	RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> login(@RequestBody $entity.name ${uncapitalizedEntityName}, HttpSession session) {
		try {
			String password = EncryptionUtils.jwtBuild(user.getPassword());
			User u = userService.login(user.getUsername(), password);
			if (u != null ) {
				String token = AuthorizationToken.generateTokenMobile(u);
				return SUCCESS(token);
			} else {
				return SUCCESS("Username and password is not match");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}
	}
	#end

	
}



