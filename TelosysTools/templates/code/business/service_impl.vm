## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
#if( $entity.hasCompositePrimaryKey() )
#set( $entityKeyType = ${entity.name} + "EntityKey" )
#else
#set( $entityKeyType = ${entity.keyAttributes[0].formattedType(0)} )
#end
##--------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder(${SRC})};

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.data.jpa.domain.Specification;

import ${ENTITY_PKG}.${entity.name};
import ${ENTITY_PKG}.jpa.${entity.name}Entity;
#if( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.jpa.${entity.name}EntityKey;
#end
#foreach( $import in $java.imports($entity) )
import $import;
#end
import ${ROOT_PKG}.business.service.${entity.name}Service;
import ${ROOT_PKG}.business.service.mapping.${entity.name}ServiceMapper;
import ${ROOT_PKG}.data.repository.jpa.${entity.name}JpaRepository;
import ${ROOT_PKG}.web.common.utils.DataUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of ${entity.name}Service
 */
@Component
@Transactional
public class ${entity.name}ServiceImpl implements ${entity.name}Service {

	@Resource
	private ${entity.name}JpaRepository ${fn.uncapitalize($entity.name)}JpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private ${entity.name}ServiceMapper ${fn.uncapitalize($entity.name)}ServiceMapper;
	
	@Override
	public ${entity.name} findById(${fn.argumentsListWithType($entity.keyAttributes)}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsList($entity.keyAttributes)});
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(id);
#else
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(${fn.argumentsList($entity.keyAttributes)});
#end
		return ${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}Entity);
	}

	@Override
	public ${entity.name}Entity findOne(${fn.argumentsListWithType($entity.keyAttributes)}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsList($entity.keyAttributes)});
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(id);
#else
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(${fn.argumentsList($entity.keyAttributes)});
#end
		return ${fn.uncapitalize($entity.name)}Entity;
	}

	@Override
	public Page<${entity.name}Entity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "${fn.argumentsList($entity.keyAttributes)}")));
		return ${fn.uncapitalize($entity.name)}JpaRepository.findAll(request);
	}

	@Override
	public List<${entity.name}> findAll() {
		Iterable<${entity.name}Entity> entities = ${fn.uncapitalize($entity.name)}JpaRepository.findAll();
		List<${entity.name}> beans = new ArrayList<${entity.name}>();
		for(${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity : entities) {
			beans.add(${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}Entity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = ${fn.uncapitalize($entity.name)}JpaRepository.count();
		return count;
	}

	@Override
	public ${entity.name} save(${entity.name} ${fn.uncapitalize($entity.name)}) {
		return update(${fn.uncapitalize($entity.name)}) ;
	}

	@Override
	public ${entity.name} create(${entity.name} ${fn.uncapitalize($entity.name)}) {
/*
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(id);
#else
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
#end
		if( ${fn.uncapitalize($entity.name)}Entity != null ) {
			throw new IllegalStateException("already.exists");
		}

		${fn.uncapitalize($entity.name)}Entity = new ${entity.name}Entity();
		${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}To${entity.name}Entity(${fn.uncapitalize($entity.name)}, ${fn.uncapitalize($entity.name)}Entity);
		${entity.name}Entity ${fn.uncapitalize($entity.name)}EntitySaved = ${fn.uncapitalize($entity.name)}JpaRepository.save(${fn.uncapitalize($entity.name)}Entity);
		return ${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}EntitySaved);
*/
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = new ${entity.name}Entity();
		${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}To${entity.name}Entity(${fn.uncapitalize($entity.name)}, ${fn.uncapitalize($entity.name)}Entity);
		${entity.name}Entity ${fn.uncapitalize($entity.name)}EntitySaved = ${fn.uncapitalize($entity.name)}JpaRepository.save(${fn.uncapitalize($entity.name)}Entity);
		return ${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}EntitySaved);
	}

	@Override
	public ${entity.name} update(${entity.name} ${fn.uncapitalize($entity.name)}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(id);
#else
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
#end
		${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}To${entity.name}Entity(${fn.uncapitalize($entity.name)}, ${fn.uncapitalize($entity.name)}Entity);
		${entity.name}Entity ${fn.uncapitalize($entity.name)}EntitySaved = ${fn.uncapitalize($entity.name)}JpaRepository.save(${fn.uncapitalize($entity.name)}Entity);
		return ${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}EntitySaved);
	}

	@Override
	public void delete(${fn.argumentsListWithType($entity.keyAttributes)}) {
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsList($entity.keyAttributes)});
		${fn.uncapitalize($entity.name)}JpaRepository.delete(id);
#else
		${fn.uncapitalize($entity.name)}JpaRepository.delete(${fn.argumentsList($entity.keyAttributes)});
#end
	}

	public ${entity.name}JpaRepository get${entity.name}JpaRepository() {
		return ${fn.uncapitalize($entity.name)}JpaRepository;
	}

	public void set${entity.name}JpaRepository(${entity.name}JpaRepository ${fn.uncapitalize($entity.name)}JpaRepository) {
		this.${fn.uncapitalize($entity.name)}JpaRepository = ${fn.uncapitalize($entity.name)}JpaRepository;
	}

	public ${entity.name}ServiceMapper get${entity.name}ServiceMapper() {
		return ${fn.uncapitalize($entity.name)}ServiceMapper;
	}

	public void set${entity.name}ServiceMapper(${entity.name}ServiceMapper ${fn.uncapitalize($entity.name)}ServiceMapper) {
		this.${fn.uncapitalize($entity.name)}ServiceMapper = ${fn.uncapitalize($entity.name)}ServiceMapper;
	}

	@Override
	public Page<${entity.name}Entity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return ${fn.uncapitalize($entity.name)}JpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

#foreach( $field in $dataFields )
#if( $field.formattedName(0) == "isDelete" )
	@Override
	public void update_isDelete(Integer id) {
		 try {
			 ${fn.uncapitalize($entity.name)}JpaRepository.update_isDelete(id);
			} catch (Exception e) {
				e.printStackTrace();
			}
	}
	
#end
#if( $field.formattedName(0) == "userId" )
	@Override
	public Page<${entity.name}Entity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return ${fn.uncapitalize($entity.name)}JpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
#end
#if( (${uncapitalizedEntityName} == "user" || ${uncapitalizedEntityName} == "users" || ${uncapitalizedEntityName} == "member" || ${uncapitalizedEntityName} == "members") && $field.formattedName(0) == "username")
	@Override
	public ${entity.name}Entity findByUsername(String $field.formattedName(0)) {
		try {
			return ${fn.uncapitalize($entity.name)}JpaRepository.findByUsername(${field.formattedName(0)});
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
#end
#end

#if( ${uncapitalizedEntityName} == "user" || ${uncapitalizedEntityName} == "users" || ${uncapitalizedEntityName} == "member" || ${uncapitalizedEntityName} == "members")
	@Override
	public ${entity.name} login(String username, String password) {
		try {
			${entity.name}Entity u = ${fn.uncapitalize($entity.name)}JpaRepository.login(username, password);
			return ${uncapitalizedEntityName}ServiceMapper.map${entity.name}EntityTo${entity.name}(u);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
#end

	@Override
	public Page<${entity.name}Entity> filterAdmin( Map<String, Object> params, Integer page, Integer size) {

		Specification<${entity.name}Entity> spec = new Specification<${entity.name}Entity>() {
			@Override
			public Predicate toPredicate(Root<${entity.name}Entity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();

#foreach( $field in $dataFields )
#if( $field.fullType == "java.lang.String" )
				if (params.get("key") != null) {
				String key = String.valueOf(params.get("key"));
					if (params.get("type") != null) {
						String type = String.valueOf(params.get("type"));
						Predicate predicate = cb.equal(root.get(type), "%"+key+"%");
						predicates.add(predicate);
					}
				}
#break
#end
#end

#foreach( $field in $dataFields )
#if( $field.formattedName(0) =="createDate" )
				if(params.get("startTime") != null){
					String startTime = String.valueOf(params.get("startTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),DataUtils.parseDate(startTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if(params.get("endTime") != null){
					String endTime = String.valueOf(params.get("endTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),DataUtils.parseDate(endTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}

#break
#end
#end
				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order order = new Order(Direction.DESC, "createDate");
		if (params.get("orderBy") != null) {
			String orderBy = String.valueOf(params.get("orderBy"));
			order = new Order(Direction.DESC, orderBy);
		}

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(order));
		return ${uncapitalizedEntityName}JpaRepository.findAll(spec, pageable);
	}

}
